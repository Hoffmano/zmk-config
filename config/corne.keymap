/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt { tapping-term-ms = <300>; };

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <50>;
};

&sl { /delete-property/ quick-release; };

/ {
    behaviors {
        to_to: to_to {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_TO";
            bindings = <&to>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        layer_dance: layer_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_DANCE";
            #binding-cells = <0>;
            bindings = <&to_to 1 0>, <&to 2>, <&to 4>;
        };

        enter: enter {
            compatible = "zmk,behavior-tap-dance";
            label = "ENTER";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp LC(ENTER)>;
        };

        hold_mo_tap_caps: hold_mo_tap_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_MO_TAP_CAPS";
            #binding-cells = <2>;
            bindings = <&mo>, <&caps_word>;

            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <33 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        letters {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&hold_mo_tap_caps 3 0  &kp Q  &kp W           &kp E        &kp R             &kp T      &kp Y              &kp U             &kp I         &kp O            &kp P          &kp TILDE
&lt 2 QUESTION         &kp A  &mt LEFT_ALT S  &mt RCTRL D  &mt LEFT_SHIFT F  &kp G      &kp H              &mt LEFT_SHIFT J  &mt RCTRL K   &mt RIGHT_ALT L  &kp BACKSPACE  &mt GRAVE APOS
&lt 1 EXCLAMATION      &kp Z  &kp X           &kp C        &kp V             &kp B      &kp N              &kp M             &kp COMMA     &kp PERIOD       &trans         &kp CARET
                                              &kp ESC      &enter            &kp TAB    &kp LC(BACKSPACE)  &kp SPACE         &kp LEFT_GUI
            >;
        };

        special {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans    &kp LESS_THAN  &kp GREATER_THAN  &kp LCTRL   &kp COLON        &kp BSPC   &kp LS(LBRC)  &kp RBRC  &kp GRAVE    &kp MINUS  &kp PLUS
&trans  &kp PIPE  &kp DOLLAR     &kp AT_SIGN       &kp HASH    &kp AMPERSAND    &kp QMARK  &kp LPAR      &kp RPAR  &kp PERCENT  &kp BSLH   &kp STAR
&trans  &trans    &trans         &trans            &trans      &trans           &kp UNDER  &kp LBKT      &kp RBKT  &kp SQT      &kp DOT    &kp COMMA
                                 &kp K_UNDO        &kp K_REDO  &trans           &kp RET    &kp EQUAL     &kp RALT
            >;
        };

        number {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &trans     &kp N7        &kp N8        &kp N9        &kp MINUS  &kp PLUS
&trans  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &trans     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp SLASH  &kp ASTERISK
&trans  &kp F11  &kp F12  &trans  &trans  &trans     &trans     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp COMMA  &kp PERIOD
                          &trans  &trans  &trans     &kp ENTER  &kp EQUAL     &kp N0
            >;
        };

        i3wm {
            bindings = <
&trans  &kp LG(N1)        &kp RG(N2)  &kp RG(N3)         &kp LG(N4)      &kp LG(N5)    &kp LG(N6)   &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp PG_UP      &kp HOME
&trans  &kp K_PLAY_PAUSE  &kp K_MUTE  &kp K_VOLUME_DOWN  &kp K_VOL_UP    &trans        &kp LEFT     &kp DOWN    &kp UP      &kp RIGHT   &kp PAGE_DOWN  &kp END
&trans  &trans            &trans      &trans             &trans          &trans        &kp LG(H)    &kp LG(J)   &kp LG(K)   &kp LG(L)   &trans         &trans
                                      &trans             &kp LEFT_SHIFT  &trans        &kp K_POWER  &kp K_LOCK  &trans
            >;
        };

        keyboard {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&bootloader  &kp LCTRL     &kp LCTRL     &kp LCTRL     &kp LCTRL     &kp LCTRL       &kp LCTRL  &kp LCTRL  &kp LCTRL  &kp LCTRL  &kp LCTRL  &bootloader
&trans       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LCTRL  &kp LCTRL  &kp LCTRL  &kp LCTRL  &kp LCTRL  &kp LCTRL
&kp LCTRL    &kp LCTRL     &kp LCTRL     &kp LCTRL     &kp LCTRL     &kp LCTRL       &kp LCTRL  &kp LCTRL  &kp LCTRL  &kp LCTRL  &kp LCTRL  &kp LCTRL
                                         &bt BT_CLR    &kp LCTRL     &kp LCTRL       &kp LCTRL  &kp LCTRL  &kp LCTRL
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        keyboard {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
