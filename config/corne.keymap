/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE SPACE CARET GRAVE TILDE SQT DOT COMMA>; };

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        enter: enter {
            compatible = "zmk,behavior-tap-dance";
            label = "ENTER";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp LC(ENTER)>;
        };

        backspace: backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp LC(BACKSPACE)>, <&kp BACKSPACE>;
        };
    };

    combos {
        compatible = "zmk,combos";

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <33 32>;
        };

        cedilha {
            bindings = <&cedilha>;
            key-positions = <27 20>;
        };

        a_tilde {
            bindings = <&a_tilde>;
            key-positions = <13 20>;
        };

        o_tilde {
            bindings = <&o_tilde>;
            key-positions = <15 9>;
        };

        i_agudo {
            bindings = <&i_agudo>;
            key-positions = <8 16>;
        };

        a_agudo {
            bindings = <&a_agudo>;
            key-positions = <13 19>;
        };

        e_agudo {
            bindings = <&e_agudo>;
            key-positions = <19 3>;
        };

        o_agudo {
            bindings = <&o_agudo>;
            key-positions = <9 16>;
        };

        u_agudo {
            bindings = <&u_agudo>;
            key-positions = <16 7>;
        };

        a_grave {
            bindings = <&a_grave>;
            key-positions = <13 22>;
        };

        e_chapeu {
            bindings = <&e_chapeu>;
            key-positions = <3 21>;
        };

        o_chapeu {
            bindings = <&o_chapeu>;
            key-positions = <9 14>;
        };

        a_chapeu {
            bindings = <&a_chapeu>;
            key-positions = <13 21>;
        };

        atilde2 {
            bindings = <&a_tilde>;
            key-positions = <13 15>;
        };

        otilde2 {
            bindings = <&o_tilde>;
            key-positions = <9 20>;
        };

        iagudo2 {
            bindings = <&i_agudo>;
            key-positions = <8 19>;
        };

        aagudo2 {
            bindings = <&a_agudo>;
            key-positions = <13 16>;
        };

        eagudo2 {
            bindings = <&e_agudo>;
            key-positions = <3 16>;
        };

        oacudo2 {
            bindings = <&o_agudo>;
            key-positions = <9 19>;
        };

        uagudo2 {
            bindings = <&u_agudo>;
            key-positions = <7 19>;
        };

        agrave2 {
            bindings = <&a_grave>;
            key-positions = <13 17>;
        };

        echapeu2 {
            bindings = <&e_chapeu>;
            key-positions = <3 14>;
        };

        ochapeu2 {
            bindings = <&o_chapeu>;
            key-positions = <9 21>;
        };

        achapeu2 {
            bindings = <&a_chapeu>;
            key-positions = <13 14>;
        };

        cedilha2 {
            bindings = <&cedilha>;
            key-positions = <27 15>;
        };
    };

    macros {
        cedilha: cedilha {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp C>;
            label = "CEDILHA";
        };

        a_tilde: a_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp A>;
            label = "A_TILDE";
        };

        o_tilde: o_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp O>;
            label = "O_TILDE";
        };

        a_agudo: a_agudo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp A>;
            label = "A_AGUDO";
        };

        a_grave: a_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp A>;
            label = "A_GRAVE";
        };

        e_agudo: e_agudo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp E>;
            label = "E_AGUDO";
        };

        i_agudo: i_agudo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp I>;
            label = "I_AGUDO";
        };

        o_agudo: o_agudo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp O>;
            label = "O_AGUDO";
        };

        u_agudo: u_agudo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp U>;
            label = "U_AGUDO";
        };

        e_chapeu: e_chapeu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp E>;
            label = "E_CHAPEU";
        };

        o_chapeu: o_chapeu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp O>;
            label = "O_CHAPEU";
        };

        a_chapeu: a_chapeu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp A>;
            label = "A_CHAPEU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        letters {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&lt 3 SLASH        &kp Q        &kp W           &kp E        &kp R             &kp T     &kp Y       &kp U             &kp I        &kp O            &kp P                           &kp BACKSPACE
&lt 2 QUESTION     &mt LC(A) A  &mt LEFT_ALT S  &mt RCTRL D  &mt LEFT_SHIFT F  &kp G     &kp H       &mt LEFT_SHIFT J  &mt RCTRL K  &mt RIGHT_ALT L  &mt DOUBLE_QUOTES SINGLE_QUOTE  &kp TILDE
&lt 1 EXCLAMATION  &kp Z        &kp X           &mt LC(C) C  &mt LC(V) V       &kp B     &kp N       &kp M             &kp COMMA    &kp DOT          &trans                          &kp DELETE
                                                &kp ESC      &kp LGUI          &enter    &caps_word  &kp SPACE         &kp TAB
            >;
        };

        special {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp CARET  &kp GRAVE      &trans            &trans       &trans           &trans  &kp LEFT_BRACE  &kp RBRC  &trans  &trans  &trans
&trans  &kp PIPE   &kp DOLLAR     &kp AT_SIGN       &kp HASH     &kp AMPERSAND    &trans  &kp LPAR        &kp RPAR  &trans  &trans  &trans
&trans  &kp COLON  &kp LESS_THAN  &kp GREATER_THAN  &kp PERCENT  &kp UNDER        &trans  &kp LBKT        &kp RBKT  &trans  &trans  &trans
                                  &trans            &trans       &trans           &trans  &trans          &trans
            >;
        };

        number {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F12    &kp DOT    &kp N7        &kp N8        &kp N9        &kp EQUAL            &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &kp COMMA  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS            &kp PLUS
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F10    &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &mt BACKSLASH SLASH  &kp STAR
                        &trans  &trans  &trans     &trans     &trans        &trans
            >;
        };

        i3wm {
            bindings = <
&trans  &trans  &kp LS(LG(N7)) LG(N7)  &kp LS(LG(N8)) LG(N8)   &kp LS(LG(N9)) LG(N9)   &trans     &trans        &trans        &trans      &trans         &kp PG_UP      &kp C_VOLUME_UP
&trans  &trans  &kp LS(LG(N4)) LG(N4)  &kp LS(LG(N5)) LG(N5)   &kp LS(LG(N6)) LG(N6)   &trans    &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &kp PAGE_DOWN  &kp C_VOL_DN
&trans  &trans  &kp LS(LG(N1)) LG(N1)  &kp LS(LG(N2)) LG(N2)   &kp LS(LG(N3)) LG(N3)   &trans    &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &trans         &kp K_MUTE
                                      &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };

        keyboard {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans        &trans        &trans        &trans        &sys_reset      &sys_reset   &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans       &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &bootloader     &bootloader  &trans  &trans  &trans  &trans  &trans
                                    &bt BT_CLR    &trans        &trans          &kp K_POWER  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        keyboard {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
